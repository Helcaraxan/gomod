#!/usr/bin/env bash
# vim: set tabstop=4 shiftwidth=4 noexpandtab
set -e -u -o pipefail

# This script tests the correctness of the other scripts present in this folder.
script_dir="$(dirname "${BASH_SOURCE[0]}")"

# This script can use itself to inject content into the scripts under tests. It
# is named 'go' such that it can temporarily override the true 'go' binary and
# provide test-controlled output instead.
if (($# > 0)); then
	echo "${dependencies}" | tr ';' '\n'
	exit 0
fi
PATH="${script_dir}:${PATH}"
export PATH

# We source the scripts to be tested.
# shellcheck source=./gomod_custom_func.sh
source "${script_dir}/gomod_custom_func.sh"

# Always identify failures on exit.
function interrupt() {
	echo "The tests were interrupted and as result did not pass."
	exit 1
}
trap interrupt SIGINT SIGTERM

# Due to Bash's finicky nature we determine how many test we expect to run and
# assert against that expected number at the end of each test run.
function count_test_invocations() {
	local test_invocations

	test_invocations="$(awk '
    BEGIN { tail=0 }
    { if($0 == "# - TEST INVOCATIONS -") { tail=1 } else if(tail == 1) { print } }
    ' "${BASH_SOURCE[0]}")"
	expected_assert_count="$(grep -c "^test_gomod_graph_" <<<"${test_invocations}")"
}

# Read test result at end of script and exit accordingly.
success=0
assert_count=0
expected_assert_count=0
function finalize() {
	if ((assert_count != expected_assert_count)); then
		echo "Asserted on ${assert_count} test results but expected ${expected_assert_count}"
		exit 1
	elif ((success != 0)); then
		echo "One or more tests failed. See output above for details."
		exit 1
	fi
	echo "All ${assert_count} tests ran successfully."
	exit 0
}
trap finalize EXIT

function assert_compreply_content() {
	local result_diff

	assert_count="$((assert_count + 1))"
	result_diff="$(diff <(printf "%s;" "${COMPREPLY[@]}") <(printf "%s;" "${expected[@]}"))"
	if [[ -n ${result_diff} ]]; then
		echo "Expected to retrieve:"
		echo "${expected[*]}"
		echo ""
		echo "Instead got:"
		echo "${COMPREPLY[*]}"
		echo ""
		echo "Diff is: ${result_diff}"
		echo ""
		success=1
	fi
	unset expected
	unset COMPREPLY
}

# Meta-test function for __gomod_graph_format.
function test_gomod_graph_format() {
	local cur expected expected_raw

	cur="$1"
	expected_raw="$2"
	IFS=";" read -ra expected <<<"${expected_raw}"

	__gomod_graph_format || true

	assert_compreply_content
}

# Meta-test function for __gomod_graph_dependencies.
function test_gomod_graph_dependencies() {
	local cur expected expected_raw

	cur="$1"
	expected_raw="$2"
	dependencies="$3"

	IFS=";" read -ra expected <<<"${expected_raw}"
	export dependencies

	__gomod_graph_dependencies || true

	assert_compreply_content
}

# Only write test invocations below the 'TEST INVOCATIONS' marker. Each test
# function needs to be named following the 'test_gomod_graph_*' pattern.
count_test_invocations

# - TEST INVOCATIONS -

test_gomod_graph_format "" "gif;jpg;pdf;png;ps"
test_gomod_graph_format "g" "gif"
test_gomod_graph_format "p" "pdf;png;ps"
test_gomod_graph_format "pn" "png"

test_gomod_graph_dependencies "" "foo;bar;deadbeef" "foo v1.0.0;bar v1.0.0;deadbeef v1.0.0"
test_gomod_graph_dependencies "d" "deadbeef" "foo v1.0.0;bar v1.0.0;deadbeef v1.0.0"
